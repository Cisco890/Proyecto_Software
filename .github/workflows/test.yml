name: Test & Regression

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb?schema=public
      SECRET_KEY: test_secret_key_for_ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        working-directory: Backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: Backend
        run: npx prisma generate

      - name: Reset test database
        working-directory: Backend
        run: npx prisma migrate reset --force --skip-seed

      - name: Seed database
        working-directory: Backend
        run: node prisma/seed.cjs

      - name: Start server in background
        working-directory: Backend
        run: |
          npm start &
          echo $! > server.pid
          sleep 15  # Más tiempo para inicialización

      - name: Verify server is running
        run: |
          for i in {1..10}; do
            if curl -f http://localhost:3000/api/tutorias/tutores; then
              echo " Server is responding"
              break
            else
              echo " Waiting for server... attempt $i"
              sleep 3
            fi
          done

      - name: Run unit tests
        working-directory: Backend
        run: |
          echo " Ejecutando pruebas unitarias..."
          npm run test:unit
        continue-on-error: false

      - name: Run load tests
        working-directory: Backend
        run: |
          echo " Ejecutando pruebas de carga..."
          npm run test:load
        continue-on-error: true # Permitir fallos en CI

      - name: Run stress tests (basic)
        working-directory: Backend
        run: |
          echo " Ejecutando pruebas de estrés básicas..."
          # Crear versión reducida para CI
          CI=true npm run test:stress
        continue-on-error: true

      - name: Generate coverage report
        working-directory: Backend
        run: |
          echo " Generando reporte de cobertura..."
          npm run coverage || echo "Coverage generation failed, continuing..."
        continue-on-error: true

      - name: Stop server
        working-directory: Backend
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          # Matar cualquier proceso de Node.js residual
          pkill -f "node.*app.js" || true

      - name: Upload coverage report (if exists)
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: Backend/coverage/
          if-no-files-found: ignore

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: error-logs
          path: |
            Backend/*.log
            Backend/logs/
          if-no-files-found: ignore

  # Job simplificado para performance
  performance-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      NODE_ENV: test
      DATABASE_URL: postgresql://testuser:testpass@localhost:5432/testdb?schema=public
      SECRET_KEY: test_secret_key_for_ci

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        working-directory: Backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: Backend
        run: npx prisma generate

      - name: Reset and seed database
        working-directory: Backend
        run: |
          npx prisma migrate reset --force --skip-seed
          node prisma/seed.cjs

      - name: Start server for performance tests
        working-directory: Backend
        run: |
          npm start &
          echo $! > server.pid
          sleep 20

      - name: Run performance tests
        working-directory: Backend
        run: |
          echo " Ejecutando pruebas de rendimiento..."
          npm run test:performance || echo "Performance tests completed with warnings"
        continue-on-error: true

      - name: Generate performance summary
        working-directory: Backend
        run: |
          mkdir -p performance-reports
          echo "Performance tests completed at $(date)" > performance-reports/summary.txt
          echo "Environment: GitHub Actions CI" >> performance-reports/summary.txt

      - name: Stop server
        working-directory: Backend
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
            rm server.pid
          fi
          pkill -f "node.*app.js" || true

      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-reports
          path: Backend/performance-reports/
          if-no-files-found: ignore
