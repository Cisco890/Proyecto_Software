// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum nivel_academico {
  primero
  segundo
  tercero
  cuarto
  quinto
}

enum tipo_notificacion {
  recordatorio
  alerta
  mensaje
  sistema
}

enum metodo_pago {
  tarjeta
  efectivo
  transferencia
}

enum estado_pago {
  pendiente
  completado
  rechazado
  cancelado
}

enum estado_sesion {
  pendiente
  completada
  en_curso
  cancelada
}

enum modalidad {
  virtual
  presencial
  hibrido
}

enum tipo_usuario {
  administrador
  estudiante
  tutor
}

model Perfiles {
  id_perfil Int        @id @default(autoincrement())
  nombre    String     @db.VarChar(100)
  usuarios  Usuarios[]
  roles     Roles[]
}

model Roles {
  id_rol      Int    @id @default(autoincrement())
  descripcion String @db.VarChar(100)
  funcion     String
  id_perfil   Int

  perfil Perfiles @relation(fields: [id_perfil], references: [id_perfil])
}

model Usuarios {
  id_usuario     Int          @id @default(autoincrement())
  nombre         String       @db.VarChar(100)
  correo         String       @unique @map("correo_electronico") @db.VarChar(150)
  contrasena     String
  tipo_usuario   tipo_usuario
  telefono       String?      @db.VarChar(20)
  fecha_registro DateTime     @default(now())
  id_perfil      Int?
  foto_perfil    String?      @db.VarChar(255)

  perfil                   Perfiles?        @relation(fields: [id_perfil], references: [id_perfil])
  tutorInfo                TutoresInfo?
  bitacoras                Bitacora[]
  notificaciones           Notificaciones[]
  sesionesTutor            Sesiones[]       @relation("SesionesComoTutor")
  sesionesAlumno           Sesiones[]       @relation("SesionesComoEstudiante")
  calificacionesComoTutor  Calificaciones[] @relation("CalificacionesComoTutor")
  calificacionesComoAlumno Calificaciones[] @relation("CalificacionesComoEstudiante")
}

model TutoresInfo {
  id          Int        @id @default(autoincrement())
  id_usuario  Int        @unique
  descripcion String?
  tarifa_hora Decimal?   @db.Decimal(10, 2)
  experiencia Int?
  horario     Int?
  modalidad   modalidad?

  usuario       Usuarios       @relation(fields: [id_usuario], references: [id_usuario])
  tutorMaterias TutorMateria[]
}

model Materias {
  id_materia     Int            @id @default(autoincrement())
  nombre_materia String         @unique @db.VarChar(100)
  sesiones       Sesiones[]
  tutorMaterias  TutorMateria[]
}

model TutorMateria {
  id_tutor_materia Int @id @default(autoincrement())
  id_tutor         Int
  id_materia       Int

  tutor   TutoresInfo @relation(fields: [id_tutor], references: [id])
  materia Materias    @relation(fields: [id_materia], references: [id_materia])
}

model Bitacora {
  id          Int      @id @default(autoincrement())
  id_usuario  Int
  tipo_evento String   @db.VarChar(50)
  descripcion String
  fecha_hora  DateTime @default(now())
  ip_origen   String   @db.VarChar(45)

  usuario Usuarios @relation(fields: [id_usuario], references: [id_usuario])
}

model Notificaciones {
  id_notificacion   Int               @id @default(autoincrement())
  id_usuario        Int
  tipo_notificacion tipo_notificacion
  mensaje           String
  fecha_envio       DateTime          @default(now())

  usuario Usuarios @relation(fields: [id_usuario], references: [id_usuario])
}

model Sesiones {
  id_sesion     Int           @id @default(autoincrement())
  id_tutor      Int
  id_estudiante Int
  id_materia    Int
  fecha_hora    DateTime      @default(now())
  duracion_min  Int?
  estado        estado_sesion

  tutor          Usuarios         @relation("SesionesComoTutor", fields: [id_tutor], references: [id_usuario])
  estudiante     Usuarios         @relation("SesionesComoEstudiante", fields: [id_estudiante], references: [id_usuario])
  materia        Materias         @relation(fields: [id_materia], references: [id_materia])
  pagos          Pagos[]
  calificaciones Calificaciones[]
}

model Pagos {
  id_pago     Int         @id @default(autoincrement())
  id_sesion   Int
  monto       Decimal     @db.Decimal(10, 2)
  metodo_pago metodo_pago
  fecha_pago  DateTime    @default(now())
  estado_pago estado_pago @default(pendiente)

  sesion Sesiones @relation(fields: [id_sesion], references: [id_sesion])
}

model Calificaciones {
  id_calificacion    Int      @id @default(autoincrement())
  id_tutor           Int
  id_estudiante      Int
  id_sesion          Int
  calificacion       Int?
  comentario         String?
  fecha_calificacion DateTime @default(now())

  tutor      Usuarios @relation("CalificacionesComoTutor", fields: [id_tutor], references: [id_usuario])
  estudiante Usuarios @relation("CalificacionesComoEstudiante", fields: [id_estudiante], references: [id_usuario])
  sesion     Sesiones @relation(fields: [id_sesion], references: [id_sesion])
}
